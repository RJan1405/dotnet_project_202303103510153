@model IEnumerable<EventTicketingSystem.Models.TicketEmail>
@{
    ViewData["Title"] = "Email Your Tickets";
}
<div class="container py-4">
    <h1 class="mb-4">Mail Inbox</h1>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (!Model.Any())
    {
        <div class="alert alert-info">
            No ticket emails yet. Use <a asp-controller="Event" asp-action="MyTickets">My Tickets</a> to send.
        </div>
    }
    else
    {
        <div class="row g-4">
            <!-- Message list -->
            <div class="col-md-4">
                <div class="card h-100">
                    <div class="card-header">
                        <strong>Inbox</strong>
                    </div>
                    <div class="list-group list-group-flush" id="emailList">
                        @foreach (var item in Model)
                        {
                            <button type="button"
                                    class="list-group-item list-group-item-action d-flex justify-content-between align-items-start"
                                    data-email-id="@item.Id"
                                    data-subject="@item.Subject"
                                    data-event="@item.Registration.Event.Title"
                                    data-registration-id="@item.RegistrationId"
                                    data-sent="@item.SentAt.ToLocalTime().ToString("dd-MM-yyyy HH:mm")">
                                <div class="ms-2 me-auto">
                                    <div class="fw-semibold">@item.Subject</div>
                                    <small class="text-muted">@item.Registration.Event.Title</small>
                                </div>
                                <small class="text-muted">@item.SentAt.ToLocalTime().ToString("HH:mm")</small>
                            </button>

                            <!-- Hidden body for preview -->
                            <div id="email-body-@item.Id" class="d-none">
                                @Html.Raw(item.BodyHtml)
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Preview pane -->
            <div class="col-md-8">
                <div class="card h-100">
                    <div class="card-header d-flex flex-wrap justify-content-between align-items-center">
                        <div>
                            <div id="previewSubject" class="fw-bold">Select a message</div>
                            <small class="text-muted">
                                <span id="previewEvent"></span>
                                <span id="previewSent"></span>
                            </small>
                        </div>
                        <div class="d-flex gap-2">
                            <a id="previewDownload" class="btn btn-sm btn-outline-primary" href="#" disabled>Download Ticket</a>
                            <a id="previewResend" class="btn btn-sm btn-outline-success" href="#" disabled>Resend</a>
                            <button type="button" class="btn btn-sm btn-outline-secondary" onclick="window.print()">Print</button>
                        </div>
                    </div>
                    <div class="card-body">
                        <div id="previewBody" class="mail-preview-content">
                            <p class="text-muted mb-0">Choose an email from the inbox to view its content.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
<script>
(function () {
    const list       = document.getElementById('emailList');
    if (!list) return;

    const subjectEl  = document.getElementById('previewSubject');
    const eventEl    = document.getElementById('previewEvent');
    const sentEl     = document.getElementById('previewSent');
    const bodyEl     = document.getElementById('previewBody');
    const resendEl   = document.getElementById('previewResend');
    const downloadEl = document.getElementById('previewDownload');

    const activate = (btn) => {
        Array.from(list.querySelectorAll('.list-group-item.active')).forEach(b => b.classList.remove('active'));
        btn.classList.add('active');

        const id = btn.getAttribute('data-email-id');
        const subject = btn.getAttribute('data-subject');
        const eventTitle = btn.getAttribute('data-event');
        const sent = btn.getAttribute('data-sent');
        const registrationIdAttr = btn.getAttribute('data-registration-id');

        const bodyContainer = document.getElementById('email-body-' + id);
        const html = bodyContainer ? bodyContainer.innerHTML : '<p class="text-muted">No content</p>';

        subjectEl.textContent = subject || 'Message';
        eventEl.textContent = eventTitle ? ('• ' + eventTitle + ' ') : '';
        sentEl.textContent = sent ? ('• ' + sent) : '';
        bodyEl.innerHTML = html;

        if (downloadEl) {
            downloadEl.href = '/Registration/DownloadTicket?emailId=' + encodeURIComponent(id);
            downloadEl.removeAttribute('disabled');
        }
        if (resendEl && registrationIdAttr) {
            resendEl.href = '/Registration/SendConfirmationEmail?id=' + encodeURIComponent(registrationIdAttr);
            resendEl.removeAttribute('disabled');
        } else if (resendEl) {
            resendEl.setAttribute('disabled', 'disabled');
            resendEl.removeAttribute('href');
        }
    };

    Array.from(list.querySelectorAll('.list-group-item')).forEach(btn => {
        btn.addEventListener('click', () => activate(btn));
    });

    const first = list.querySelector('.list-group-item');
    if (first) activate(first);
})();
</script>
}